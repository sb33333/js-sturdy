함수란 무엇인가
	함수 선언 방법
	함수 호출 방법

이벤트는 무엇이간
	어떻게 이벤트를 처리하는가
	어떻게 이벤트를 사용하는가


이벤트(Event)

	웹 브라우저나 사용자가 행하는 동작
		ex:
			마우스 클릭, 마우스 움직임, 로딩의 완료 등...
		https://developer.mozilla.org/ko/docs/Web/Events

	


변수
	스코프: 변수를 선언하고 사용할 때 변수가 적용되는 범위.
	
	변수의 적용 범위
		전역 변수(global variable): 스크립트 소스 전체에서 사용할 수 있는 변수. 프로그램이 종료될 때 사라진다.
		지역 변수(local variable): 변수를 선언한 블록{  } 내에서만 사용할 수 있는 변수. 선언된 블록이 종료되면 함께 사라진다.
		
	
		

함수의 종류

	함수	┬	사용자 정의 함수
		│		사용자가 정의해서 사용하는 함수
		└	JavaScript 코어 함수
				JavaScript가 기본적으로 제공하는 함수.

사용 방법에 따른 함수의 종류
	
	1. 일반 함수
		일반적인 함수. 선언 후 호출.
	2. 중첩 함수
		함수 안에 함수가 있는 형태.
	3. 콜백 함수
		어떤 함수의 실행 결과를 처리하는 형태의 함수.
	4. 클로저 함수
		https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures
		
		
중첩 함수

	1. 중첩 함수는
		1) 외부에서 선언된 함수를 호출할 수 있다.
		2) 내부에서 새로운 함수를 선언하고 사용(호출)할 수 있다.
		※ 이 때, 중첩 함수(내부 함수)는 선언된 블록(외부 함수 블록) 안에서만 사용 할 수 있다.
		※ 내부에서 선언된 중첩 함수는 외부 함수 바깥에서 접근할 수 없다. (= 함수 내부에서만 기능한다.)
		
	2. 중첩 함수의 용도
		○ 이벤트 리스너를 구현할 때 많이 사용한다.
		○ 함수 내부의 여러 기능을 나누거나 기능을 재사용하는 용도로 사용한다.
		○ 중첩 함수는 외부 함수와 내부 함수가 긴밀한 관계일 때 사용하는 것이 좋다.
		○ 중첩 함수는 중첩 함수를 포함하는 외부 함수의 지역 변수에 접근할 수 있다.
			같은 이름으로 전역 변수, 외부 함수의 지역 변수가 있을 경우 외부 함수의 지역 변수에 우선 접근한다.
				
				
콜백 함수

	1. 콜백 함수는 주로 함수 내부의 처리 결과를 함수 외부로 보낼 때 사용한다.
		ex:
			function A(callback) {		→ function A가 처리한 값을 callback함수의 매개변수로 전달하여 처리한다.
				...
				callback(someResult)
			} 
	※참조: https://ko.wikipedia.org/wiki/%EC%BD%9C%EB%B0%B1
	
	2. 콜백 함수의 장점
		○ 함수에서 자료를 계산하는 부분과 자료 계산의 결과를 처리하는 부분을 분리할 수 있다.
			ex:
				주어진 숫자를 계산한 결과를 출력하는 모듈 → 숫자를 계산하는 부분 + 출력하는 부분(콘솔, 파일, document 등...)
		○ 사용자의 필요에 따라 결과 처리를 유연하게 할 수 있다.
		○ 자료의 처리와 처리 결과의 구현을 나눠 작업할 때 유용하다.
		
	3. 동기 그리고 비동기
		○ 동기: 선행 코드가 완료된 후 후행 코드를 실행하는 것.
		○ 비동기: 선행 코드의 완료 여부와 관계없이 후행 코드를 실행하는 것.
			ex:
				JS 의 setInterval() 함수.
		○ 콜백 함수는 비동기 함수의 결과값을 처리하기 위한 주된 방법이다.
			ex:
				이벤트 리스너
				타이머
				서버와 데이터를 주고 받는 경우
				jQuery 애니메이션 기능 
				등...



		
function func(x, y, callback) {
	......
	
	let result = x + y;
	callback(result);
}


function name() {
	로직 구현 부분
	로직 처리 부분
}

function name(callback) {
	로직 구현 부분
	callback(someValue) <-로직 처리 부분을 callback 함수에게 위임
}